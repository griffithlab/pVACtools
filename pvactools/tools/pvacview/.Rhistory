labs(x = "X.sample_a", y = "sample_b", title = "ibs2") +
scale_fill_gradient(low="white", high="blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
#heatmap
ggplot(pairs_filtered, aes(Group_a, Group_b,, fill= ibs2)) +
geom_tile() +
labs(x = "X.sample_a", y = "sample_b", title = "ibs2") +
scale_fill_gradient(low="white", high="blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
ggplot(pairs_filtered, aes(X.sample_a, sample_b, fill= relatedness)) +
geom_tile() +
labs(x = "Sample A", y = "Sample B", title = "relatedness") +
scale_fill_gradient(low="white", high="red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
#heatmap
ggplot(pairs_filtered, aes(Group_a, Group_b, fill= ibs2)) +
geom_tile() +
labs(x = "X.sample_a", y = "sample_b", title = "ibs2") +
scale_fill_gradient(low="white", high="blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
ggplot(pairs_filtered, aes(Group_a, Group_b, fill= relatedness)) +
geom_tile() +
labs(x = "Sample A", y = "Sample B", title = "relatedness") +
scale_fill_gradient(low="white", high="red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
ggplot(pairs_filtered, aes(Group_a, Group_b, fill= ibs0)) +
geom_tile() +
labs(x = "Sample A", y = "Sample B", title = "ibs0") +
scale_fill_gradient(low="white", high="forestgreen") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
pairs <- read.csv("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/raw_data/exome/somalier/updated_somalier/somalier.pairs.tsv", sep="\t")
pairs <- pairs %>%
mutate(Sample = paste(X.sample_a, sample_b, sep = " ")) %>%
mutate(Group_a = sub("^(.*?)_(.*?)_.*", "\\2", X.sample_a)) %>%
mutate(Group_b = sub("^(.*?)_(.*?)_.*", "\\2", sample_b)) %>%
mutate(GL_Bulk_a = sub("^(.*?)_(.*?)_(.*?)", "\\3", X.sample_a)) %>%
mutate(GL_Bulk_b = sub("^(.*?)_(.*?)_(.*?)", "\\3", sample_b)) %>%
mutate(as.numeric(relatedness)) %>%
arrange(X.sample_a, sample_b)
# Remove samples not meant to be in cohort
values_to_remove <- c("M57", "M200", "M201")
# Investigating unexpectedly related samples
ggplot(pairs_filtered %>% filter(relatedness > 0.5) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pairs <- read.csv("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/somalier_final_RR_cohort/somalier.pairs.tsv", sep="\t")
colnames(pairs)
#heatmap
ggplot(pairs, aes(X.sample_a, sample_b, fill= ibs2)) +
geom_tile() +
labs(x = "X.sample_a", y = "sample_b", title = "ibs2") +
scale_fill_gradient(low="white", high="blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
ggplot(pairs, aes(X.sample_a, sample_b, fill= relatedness)) +
geom_tile() +
labs(x = "X.sample_a", y = "sample_b", title = "relatedness") +
scale_fill_gradient(low="white", high="red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
ggplot(pairs, aes(X.sample_a, sample_b, fill= ibs0)) +
geom_tile() +
labs(x = "X.sample_a", y = "sample_b", title = "ibs0") +
scale_fill_gradient(low="white", high="forestgreen") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
# sample to sample relatedness for samples with higher than 0.5 relatednes
ggplot(pairs %>% filter(relatedness >= 0.20) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(pairs %>% filter(relatedness >= 0.20) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = ibs2)) +
geom_point() +
scale_color_gradient(low = "grey", high="purple") +
labs(x = "Sample A", y = "Sample B", title = "Sample To Sample IBS2") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(pairs %>% filter(relatedness >= 0.20) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = ibs0)) +
geom_point() +
scale_color_gradient(low = "grey", high="forestgreen") +
labs(x = "Sample A", y = "Sample B", title = "Sample To Sample IBS0") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# sample to sample relatedness for samples with higher than 0.5 relatednes
ggplot(pairs %>% filter(relatedness >= 0.20) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pairs <- read.csv("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/raw_data/exome/somalier/updated_somalier/somalier.pairs.tsv", sep="\t")
pairs <- read.csv("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/raw_data/exome/somalier/somalier.pairs.tsv", sep="\t")
pairs <- pairs %>%
mutate(Sample = paste(X.sample_a, sample_b, sep = " ")) %>%
mutate(Group_a = sub("^(.*?)_(.*?)_.*", "\\2", X.sample_a)) %>%
mutate(Group_b = sub("^(.*?)_(.*?)_.*", "\\2", sample_b)) %>%
mutate(GL_Bulk_a = sub("^(.*?)_(.*?)_(.*?)", "\\3", X.sample_a)) %>%
mutate(GL_Bulk_b = sub("^(.*?)_(.*?)_(.*?)", "\\3", sample_b)) %>%
mutate(as.numeric(relatedness)) %>%
arrange(X.sample_a, sample_b)
# Remove samples not meant to be in cohort
values_to_remove <- c("M57", "M200", "M201")
pairs_filtered <- pairs %>%
filter(!(Group_a %in% values_to_remove | Group_b %in% values_to_remove))
#heatmap
ggplot(pairs_filtered, aes(Group_a, Group_b, fill= ibs2)) +
geom_tile() +
labs(x = "X.sample_a", y = "sample_b", title = "ibs2") +
scale_fill_gradient(low="white", high="blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
ggplot(pairs_filtered, aes(Group_a, Group_b, fill= relatedness)) +
geom_tile() +
labs(x = "Sample A", y = "Sample B", title = "relatedness") +
scale_fill_gradient(low="white", high="red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
ggplot(pairs_filtered, aes(Group_a, Group_b, fill= ibs0)) +
geom_tile() +
labs(x = "Sample A", y = "Sample B", title = "ibs0") +
scale_fill_gradient(low="white", high="forestgreen") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5), axis.text.y = element_text(size=5))
# Investigating unexpectedly related samples
ggplot(pairs_filtered %>% filter(relatedness > 0.5) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(pairs_filtered %>% filter(relatedness >= 0.50) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = ibs2)) +
geom_point() +
scale_color_gradient(low = "grey", high="purple") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample IBS2") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(pairs_filtered %>% filter(relatedness >= 0.50) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = ibs0)) +
geom_point() +
scale_color_gradient(low = "grey", high="forestgreen") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample IBS0") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(pairs_filtered %>% filter(relatedness > 0.5) %>% filter(expected_relatedness == -1), aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# see the Bulk and Germline samples for problematic samples
values_to_keep <- c("M102", "M208", "M209", "M26", "M58", "M59", "M62", "M66", "M67")
pairs_problematic <- pairs %>%
filter((Group_a %in% values_to_remove | Group_b %in% values_to_remove))
ggplot(pairs_problematic, aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# see the Bulk and Germline samples for problematic samples
values_to_keep <- c("M102", "M208", "M209", "M26", "M58", "M59", "M62", "M66", "M67")
pairs_problematic <- pairs %>%
filter((Group_a %in% values_to_keep | Group_b %in% values_to_remove))
ggplot(pairs_problematic, aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pairs_problematic <- pairs %>%
filter((Group_a %in% values_to_keep & Group_b %in% values_to_remove))
ggplot(pairs_problematic, aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pairs_problematic <- pairs %>%
filter((Group_a %in% values_to_keep | Group_b %in% values_to_keep))
ggplot(pairs_problematic, aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pairs_problematic <- pairs %>%
filter((Group_a %in% values_to_keep & Group_b %in% values_to_keep))
ggplot(pairs_problematic, aes(x = X.sample_a, y = sample_b, color = relatedness)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
labs(x = "Sample A", y = "Sample B", title = "Unexpected Sample To Sample Relatedness") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(pairs_problematic)
View(pairs_problematic)
View(pairs)
View(pairs)
library(Seurat)
object <- readRDS("/Volumes/tfehnige/Active/scRNA-seq/ML_NK/Mechanisms_paper/fortestruns/invitro_fxn_final_final/56546and9792.20230711.PCA.NK_clustering_harmony_cutoff_Rerun.cite-seq_hto_WNNclusteringshort-term_fxn.rds")
object <- readRDS("/Volumes/tfehnige/Active/scRNA-seq/ML_NK/Mechanisms_paper/fortestruns/invitro_fxn_final_final/56546and9792.20230711.PCA.NK_clustering_harmony_cutoff_Rerun.cite-seq_hto_WNNclusteringshort-term_fxn.rds")
Idents(object) <- "Cell_Types"
object <- subset(object, idents = c("LD_unstim", "ML_unstim", "LD_K562_2hr", "LD_K562_4hr", "ML_K562_2hr", "ML_K562_4hr"))
table(Idents(object))
# remove all metadata that are factors:
# Also change the seurat_cluster factor to chatacter naames
str(object@meta.data)
object$wsnn_res.0.4 <- NULL
str(object@meta.data) # Check to see if all factors are gone
object$seurat_clusters
object <- readRDS("/Volumes/mgriffit/Active/griffithlab/gc2596/e.schmidt/fig4_foltz/730_451_3228.20230801.NK.harmony_reductiononRNAnoKIRs.LD_MLNK_withharmonybatchcorrectandwnnPC20_PC19.rds")
Idents(object) <- "Cell_Types"
table(Idents(object))
# remove all metadata that are factors:
# Also change the seurat_cluster factor to chatacter naames
str(object@meta.data)
object <- readRDS("/Volumes/tfehnige/Active/scRNA-seq/ML_NK/Mechanisms_paper/fortestruns/invitro_fxn_final_final/56546and9792.20230711.PCA.NK_clustering_harmony_cutoff_Rerun.cite-seq_hto_WNNclusteringshort-term_fxn.rds")
Idents(object) <- "Cell_Types"
object <- subset(object, idents = c("LD_unstim", "ML_unstim", "LD_K562_2hr", "LD_K562_4hr", "ML_K562_2hr", "ML_K562_4hr"))
table(Idents(object))
# remove all metadata that are factors:
# Also change the seurat_cluster factor to chatacter naames
str(object@meta.data)
seurat_object$Cell_TypesF <- as.character(seurat_object$Cell_TypesF)
object$Cell_TypesF <- as.character(object$Cell_TypesF)
object$
str(object@meta.data) # Check to see if all factors are gone
# remove all metadata that are factors:
# Also change the seurat_cluster factor to chatacter naames
str(object@meta.data)
object$wsnn_res.0.4 <- NULL
object$Cell_TypesF <- as.character(object$Cell_TypesF)
str(object@meta.data) # Check to see if all factors are gone
object$seurat_clusters <- as.integer(object$seurat_clusters)
object$seurat_clusters
str(object@meta.data) # Check to see if all factors are gone
# now do cell cycle scoring because it is easier in Seurat than scanpy:
s.genes <- cc.genes.updated.2019$s.genes
g2m.genes <- cc.genes.updated.2019$g2m.genes
DefaultAssay(object) <- "RNA"
object <- CellCycleScoring(object, s.features=s.genes, g2m.features=g2m.genes)
mtx_object <- GetAssayData(object, assay = "RNA", slot = "counts")
adt_object <- GetAssayData(object, assay = "ADT", slot = "counts")
meta_object <- object[[]]
str(meta_object)
write.csv(mtx_object, "/Volumes/mgriffit/Active/griffithlab/gc2596/e.schmidt/fig4_foltz/conversion/5_prime_data/object_RNAcounts.csv")
write.csv(meta_object, "/Volumes/mgriffit/Active/griffithlab/gc2596/e.schmidt/fig4_foltz/conversion/5_prime_data/object_meta.csv")
write.csv(adt_object, "/Volumes/mgriffit/Active/griffithlab/gc2596/e.schmidt/fig4_foltz/conversion/5_prime_data/object_ADTcounts.csv")
library(dplyr)
library(data.table)
library(vcfR)
library(ComplexUpset)
library(grid)
germline_pon <- read.csv('/storage1/fs1/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/vartrix/germline_pon_1009.tsv', sep = '\t')
germline_pon <- read.csv('/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/vartrix/germline_pon_1009.tsv', sep = '\t')
germline_pon_list <- germline_pon$germline_snps
germline_pon_list
#read in gnomad txt file we made (with both V2 and V3 SNPs), make snps column similar to germline_pon
gnomad_df <- read.csv('/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/vartrix/gnomad/gnomad_v2_and_v3_cancer_only.txt', sep = ' ')
sums
library(Matrix)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(dplyr)
#Read in vartrix output matrix
M89_snv_matrix <- readMM("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/vartrix/FilterGermlineVartrix/output/vartrix_output/M89_filtered.mtx")
M89_snv_matrix <- as.data.frame(as.matrix(M89_snv_matrix))
barcodes_M89 <- read.table("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/vartrix/FilterGermlineVartrix/data/barcode_files/barcodes_split_by_sample/M89.tsv", header = F)
#Read in a text file that has SNPs information
snps <- read.table("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/vartrix/FilterGermlineVartrix/output/vartrix_output/M89_filtered_loci.txt", header = F)
#Set columns to be all the cell barcodes, and rows to be the variants
colnames(M89_snv_matrix) <- barcodes_M89$V1
row.names(M89_snv_matrix) <- snps$V1
# Construct the data.frame
M89_df <- data.frame(t(M89_snv_matrix))
# Make the encoding more readable
# See documentation of the consensus scoring mode (`-s consensus`)
# Assuming your dataframe is named "M1_df"
M89_df <- M89_df %>%
mutate_all(~str_replace(as.character(.), "0", "No Call")) %>%
mutate_all(~str_replace(as.character(.), "1", "Ref")) %>%
mutate_all(~str_replace(as.character(.), "2", "Alt")) %>%
mutate_all(~str_replace(as.character(.), "3", "Alt/Ref"))
#
barcode_classifications <- read.table("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/vartrix/FilterGermlineVartrix/data/all_barcodes_malignant_classification.tsv", sep="\t", header=T)
row.names(barcode_classifications) <- barcode_classifications$barcode
# Re-appened -SAMP to the end of each barcode
rownames(M89_df) <- paste0(rownames(M89_df), "-M89")
M89_df$barcode <- rownames(M89_df)
# Add the cell classification
M89_df_classified <- merge(M89_df, barcode_classifications, by = "row.names", all.x = TRUE)
M89_df_classified <- M89_df_classified[, c(names(M89_df_classified)[1], "bclass", names(M89_df_classified)[-c(1, which(names(M89_df_classified) == "bclass"))])]
M89_df_classified[, 3:ncol(M89_df_classified)]  <- data.frame(lapply(M89_df_classified[, 3:ncol(M89_df_classified)], function(col) paste0(col, '-', M89_df_classified$bclass)))
# Remove variants with no coverage (aka no call) or insufficent coverage (aka ref)
# Remove columns with all entries as "No Call" or "Ref"
ncol(M89_df_classified) # 2316
M89_df_classified <- M89_df_classified %>%
select(-which(sapply(M89_df_classified, function(col) all(col == "No Call-B" | col == "Ref-B" | col == "No Call-non-B" | col == "Ref-non-B"))))
ncol(M89_df_classified) # 978
# All Cells are Identified As
# "Alt-B"
# "Alt-non-B"
# "Ref-B"
# "Ref-non-B"
# "Alt/Ref-B"
# "Alt/Ref-non-B"
# "No Call-B"
# "No Call-non-B"
# Get the number of Germline Variants
# (Non B cells with alt (>1)
M89_df_classified <- M89_df_classified %>%
select(-which(sapply(M89_df_classified, function(col) all(col == "Alt-non-B"))))
ncol(M89_df_classified) # 978
# Get the number of Somatic Variants
# B cells with alt (>1) and Non B-Cell with no alt (>1)
ncol(M89_df_classified %>%
select(-which(sapply(M89_df_classified, function(col) all(col == "Alt-B" | col == "Ref-non-B" | col == "Ref-non-B" | col == "No Call-non-B" | col == "No Call-B")))))
# 868
library(tidyverse)
# Values to count
values_to_count <- c("Alt-non-B", "Alt/Ref-non-B")
# Sum occurrences of specified values in each column
sums <- data.frame(colSums(M89_df_classified == values_to_count))
sums <- sums %>%
rename("Sum":= "colSums.M89_df_classified....values_to_count.")  %>%
rownames_to_column(sums, var = "name")
sums
sums <- sums %>%
rename("Sum":= "colSums.M89_df_classified....values_to_count.")  %>%
rownames_to_column(var = "name")
sums
sums <- sums %>% filter(Sum != 0)
sums
ggplot(aes(x = name, y = Sum, fill = name)) +
geom_bar(colour = "black", stat = "identity")
ggplot(sums, aes(x = name, y = Sum, fill = name)) +
geom_bar(stat = "identity")
sums <- sums %>% filter(Sum > 5)
sums
ggplot(sums, aes(x = name, y = Sum, fill = name)) +
geom_bar(stat = "identity")
sums <- sums %>% filter(Sum > 10)
ggplot(sums, aes(x = name, y = Sum, fill = name)) +
geom_bar(stat = "identity")
ggplot(sums, aes(x = name, y = Sum)) +
geom_bar(stat = "identity")
ggplot(sums, aes(x = name, y = Sum)) +
geom_bar(stat = "identity") +
coord_flip()
sums <- sums %>% filter(Sum > 0)
ggplot(sums, aes(x = name, y = Sum)) +
geom_bar(stat = "identity") +
coord_flip()
# Sum occurrences of specified values in each column
sums <- data.frame(colSums(M89_df_classified == values_to_count))
sums <- sums %>%
rename("Sum":= "colSums.M89_df_classified....values_to_count.")  %>%
rownames_to_column(var = "name")
sums <- sums %>% filter(Sum > 0)
ggplot(sums, aes(x = name, y = Sum)) +
geom_bar(stat = "identity") +
coord_flip()
# Sum occurrences of specified values in each column
sums <- data.frame(colSums(M89_df_classified == c("Alt-non-B", "Alt/Ref-non-B")))
sums <- sums %>%
rename("Sum":= "colSums.M89_df_classified....values_to_count.")  %>%
rownames_to_column(var = "name")
ggplot(sums %>% filter(Sum > 10), aes(x = name, y = Sum)) +
geom_bar(stat = "identity") +
coord_flip()
# Sum occurrences of specified values in each column
sums <- data.frame(colSums(M89_df_classified == c("Alt-non-B", "Alt/Ref-non-B")))
sums <- sums %>%
rename("Sum":= "colSums.M89_df_classified....values_to_count.")  %>%
rownames_to_column(var = "name")
sums
sums <- sums %>%
rename("Sum":= "colSums.M89_df_classified....c..Alt.non.B....Alt.Ref.non.B...")  %>%
rownames_to_column(var = "name")
ggplot(sums %>% filter(Sum > 10), aes(x = name, y = Sum)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(sums %>% filter(Sum > 10), aes(x = name, y = Sum)) +
geom_bar(stat = "identity") +
coord_flip() +
ggtitle("M89")
install.packages('plotly')
install.packages('gapminder')
shiny::runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
update.packages(ask = FALSE, checkBuilt = TRUE)
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
shiny::runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
x
x
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
x
input$yvrbl
input$xvrbl
df[input$xvrbl]
input$yvrbl
df[input$yvrbl]
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
runApp('pVACtools/pvactools/tools/pvacview_dev_eve')
setwd("~/pVACtools/pvactools/tools/pvacview_dev_eve")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
feature
type(feature)
class(feature)
list( names(df)[sapply(df, is.numeric)])
list(names(df)[sapply(df, is.numeric)])
sapply(df, is.numeric)
as.list(names(df)[sapply(df, is.numeric)])
feature <- as.list(names(df)[sapply(df, is.numeric)])
feature[0]
feature[[0]]
feature
feature[[1]]
default_selection <- feature[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#LSF_DOCKER_PRESERVE_ENVRIONMENT=false bsub -q general -n 16 -G compute-oncology -M 256G -R 'select[mem>256G] span[hosts=1] rusage[mem=256G]' -oo run_cytotrace_B_cells_0118.log -a 'docker(ksinghal28/singlecell_big:1.6)' Rscript run_cytotrace_B_cells_0181.R
# pip install scanoramaCT
# pip install numpy
library(Seurat)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggrepel)
library(grid)
library(cowplot)
library(CytoTRACE)
library(stringr)
raw_data_dir <- paste0("/storage1/fs1/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/cell_ranger_runs_final_RR_cohort/")
all_barcodes <- read.csv("/storage1/fs1/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/all_barcodes_malignant_classification_0107.tsv", sep = "\t")
all_barcodes <- read.csv("/storage1/fs1/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/dataframe_tsv_0118/patient_id_leiden_res0_5_df_malignant_Bcells_0118.tsv", sep = "\t")
raw_data_dir <- paste0("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/cell_ranger_runs_final_RR_cohort/")
all_barcodes <- read.csv("/Volumes/tfehnige/Active/mdaccwashu/DLBCL_scAtlas/malignant_B_cells/malignant_vs_non_malignant/dataframe_tsv_0118/patient_id_leiden_res0_5_df_malignant_Bcells_0118.tsv", sep = "\t")
# will limit this all_barcodes file to malignant B cell barcodes only
B_barcodes <- all_barcodes[all_barcodes$bcr_cnv_snv_consensus_call != "non-B",]
B_barcodes <- B_barcodes[B_barcodes$bcr_cnv_snv_consensus_call == "malignant",]
list_of_samples <- unique(B_barcodes$sample_id)
#list_of_samples_without_GEM_pairs <- setdiff(list_of_samples_without_GEM_pairs, samples_not_in_final_cohort)
list_of_samples_final <- setdiff(list_of_samples, samples_not_in_final_cohort)
samples_not_in_final_cohort <- c("M101", "M109", "M111", "M199", "M200", "M201", "M202", "M204")
#list_of_samples_without_GEM_pairs <- setdiff(list_of_samples_without_GEM_pairs, samples_not_in_final_cohort)
list_of_samples_final <- setdiff(list_of_samples, samples_not_in_final_cohort)
#Initialize a dataframe to hold all barcodes and cytotrace scores
all_barcodes_cyto <- data.frame()
#for (sample in list_of_samples_final) {
#tryCatch({
#print(paste("Starting sample", sample))
sample="M191"
#create seurat object
obj <- Read10X_h5(paste0(raw_data_dir, sample, "/outs/raw_feature_bc_matrix.h5"))
obj <- CreateSeuratObject(counts = obj, min.cells = 10, min.features = 100) #will filter out cells soon so don't need to filter here
#log normalize it
obj <- NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000)
log_matrix <- as.matrix(Seurat::GetAssayData(obj, assay = "RNA", slot = "counts"))
#limit expression matrix to filtered set of sample barcodes and remove
##first limit B_barcodes file to our sample
sample_barcodes <- B_barcodes[B_barcodes$sample_id == sample, ]
##add sample id information to each barcode in the log_matrix table (so change 'AAACAGCCAAGTTATC-1' to 'AAACAGCCAAGTTATC-1-M1')
for (col in colnames(log_matrix)) {
colnames(log_matrix)[colnames(log_matrix) == col] <- paste(col, paste0("-", sample), sep = "")
}
##find barcodes that overlap both my conicsmat log matrix and the list of filtered barcodes
barcodes_to_keep <- intersect(colnames(log_matrix), sample_barcodes$barcode)
##now filter out columns that aren't in my filtered barcodes list
log_matrix_filtered <- subset(log_matrix, select = barcodes_to_keep)
sample_cyto <- CytoTRACE(log_matrix_filtered, ncores = 16)
library(CytoTRACE)
devtools::install_local("/Users/evelynschmidt/Downloads/CytoTRACE_0.3.3.tar.gz")
library(CytoTRACE)
devtools::install_local("/Users/evelynschmidt/Downloads/CytoTRACE_0.3.3.tar.gz")
install.packages("sva")
library(stringr)
install.packages("CytoTRACE")
remotes::install_github("CzechowskiLab/CytoTRACE")
shiny::runApp()
